#ifndef _WORD_TIC_TAC_TOE_H
#define _WORD_TIC_TAC_TOE_H
#include "BoardGame_Classes.h"
#include<bits/stdc++.h>
using namespace std;

bool player1_human=false , player2_human=false ;
template <typename T>
class Word_Board:public Board<T> {
public:
    vector<string> words;
    Word_Board ();
    bool update_board (int x , int y , T symbol);
    void display_board () ;
    bool is_win() ;
    bool is_draw();
    bool game_is_over();
    char get_char();

};

template <typename T>
class Word_Player : public Player<T> {
public:
    Word_Player (string name, T symbol);
    void getmove(int& x, int& y) ;

};

template <typename T>
class Word_Random_Player : public RandomPlayer<T>{
public:
    Word_Random_Player (T symbol);
    void getmove(int &x, int &y) ;
};


//--------------------------------------- IMPLEMENTATION --------------------------------------------------------


// Constructor for X_O_Board
template <typename T>
Word_Board<T>::Word_Board() {
    this->rows = this->columns = 3;
    this->board = new char*[this->rows];
    for (int i = 0; i < 3; i++) {
        this->board[i] = new char[this->columns];
        for (int j = 0; j < 3; j++) {
            this->board[i][j] = 0;
        }
    }
    this->n_moves = 0;
}

template <typename T>
char Word_Board<T>::get_char() {
    char input_char ;
    if(this->n_moves%2 == 0){
        if(player1_human){
            cout << "Enter a character: ";
            cin >> input_char;
            return input_char;
        }
        else{
            input_char = 'A' + rand() % 26;
            return input_char;
        }
    }
    else{
        if(player2_human) {
            cout << "Enter a character: ";
            cin >> input_char;
            return input_char;
        }
        else{
            input_char = 'A' + rand() % 26;
            return input_char;
        }

    }

}


template <typename T>
bool Word_Board<T>::update_board(int x, int y, T character) {
    character=get_char();
    // Only update if move is valid
    if ((x < 0 || x >= this->rows )||( y < 0 || y >= this->columns) || (this->board[x][y] != 0)) {

        return false;
    }
    this->n_moves++;
    this->board[x][y] = toupper(character);
    return true;
}

// Display the board and the pieces on it
template <typename T>
void Word_Board<T>::display_board() {
    for (int i = 0; i < this->rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < this->columns; j++) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << this->board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}

// Returns true if there is any winner
template <typename T>
bool Word_Board<T>::is_win() {
    ifstream inputFile("dic.txt");
    if (!inputFile.is_open()) {
        cout << "error"  << "\n";
    }

    string word;
    while (getline(inputFile, word)) {
        words.push_back(word);
    }

    string H1 = string(1, this->board[0][0]) + string(1, this->board[0][1]) + string(1, this->board[0][2]);
    string H2 = string(1, this->board[1][0]) + string(1, this->board[1][1]) + string(1, this->board[1][2]);
    string H3 = string(1, this->board[2][0]) + string(1, this->board[2][1]) + string(1, this->board[2][2]);
    string V1 = string(1, this->board[0][0]) + string(1, this->board[1][0]) + string(1, this->board[2][0]);
    string V2 = string(1, this->board[0][1]) + string(1, this->board[1][1]) + string(1, this->board[2][1]);
    string V3 = string(1, this->board[0][2]) + string(1, this->board[1][2]) + string(1, this->board[2][2]);
    string D1 = string(1, this->board[0][0]) + string(1, this->board[1][1]) + string(1, this->board[2][2]);
    string D2 = string(1, this->board[0][2]) + string(1, this->board[1][1]) + string(1, this->board[2][0]);


    if ((find(words.begin(), words.end(), H1) != words.end())||
       (find(words.begin(), words.end(), H2) != words.end()) ||
       (find(words.begin(), words.end(), H3) != words.end()) ||
       (find(words.begin(), words.end(), V1) != words.end()) ||
       (find(words.begin(), words.end(), V2) != words.end()) ||
       (find(words.begin(), words.end(), V3) != words.end()) ||
       (find(words.begin(), words.end(), D1) != words.end()) ||
       (find(words.begin(), words.end(), D2) != words.end())) {
        return true;
    }

    return false;

}

// Return true if 9 moves are done and no winner
template <typename T>
bool Word_Board<T>::is_draw() {
    return (this->n_moves == 9 && !is_win());
}

template <typename T>
bool Word_Board<T>::game_is_over() {
    return is_win() || is_draw();
}

//--------------------------------------

// Constructor for X_O_Player
template <typename T>
Word_Player<T>::Word_Player(string name, T symbol) : Player<T>(name, symbol) {}

template <typename T>
void Word_Player<T>::getmove(int& x, int& y) {
    cout << "\nPlease enter your correct move (x and y) separated by spaces and make sure it is empty : ";
    cin >> x >> y;

}

// Constructor for X_O_Random_Player
template <typename T>
Word_Random_Player<T>::Word_Random_Player(T character) : RandomPlayer<T>(character) {
    this->name = "Random Computer Player";
    srand(static_cast<unsigned int>(time(0)));  // Seed the random number generator
}

template <typename T>
void Word_Random_Player<T>::getmove(int& x, int& y) {
    x = rand() % 3;
    y = rand() % 3;
}


#endif //_WORD_TIC_TAC_TOE_H
