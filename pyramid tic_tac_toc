#ifndef _PYRAMID_TICTACTOE_H
#define _PYRAMID_TICTACTOE_H

#include "BoardGame_Classes.h"
#include<bits/stdc++.h>
using namespace std;

template <typename T>
class Pyramid_Board : public Board<T> {
public:
    Pyramid_Board();
    bool update_board(int x, int y, T symbol);
    void display_board();
    bool is_win();
    bool is_draw();
    bool game_is_over();
};


template <typename T>
class Pyramid_Player : public Player<T> {
public:
    Pyramid_Player(string name, T symbol);
    void getmove(int& x, int& y);
};


template <typename T>
class Pyramid_Random_Player : public RandomPlayer<T> {
public:
    int rows;
    int columns;

    Pyramid_Random_Player(T symbol);
    void getmove(int& x, int& y);
};



//-------------------------------- IMPLEMENTATION ---------------------------------


template <typename T>
Pyramid_Board<T>::Pyramid_Board() {
    this->rows =3;
    this->columns = 5;
    this->board = new char*[this->rows];
    for (int i = 0; i < 3; i++) {
        this->board[i] = new char[this->columns];
        for (int j = 0; j < 5; j++) {
            this->board[i][j] = 0;
        }
    }
    this->n_moves = 0;
}


template <typename T>
bool Pyramid_Board<T>::update_board(int x, int y, T symbol) {
    // Only update if move is valid
    if ( (x < 0 || x >= this->rows )|| (y < 0 || y >= this->columns) || (this->board[x][y] != 0)
     || (x==0 && (y==0 || y==1 || y==3 || y==4))
     || (x==1 && (y==0 || y==4 )) ) {

        return false;
    }
    this->n_moves++;
    this->board[x][y] = toupper(symbol);
    return true;
}


template <typename T>
void Pyramid_Board<T>::display_board() {
    for (int i = 0; i < this->rows; i++) {
        if (i == 0) {
            cout << "\n                    |";
        }
        else if (i == 1) {
            cout << "\n          |";
        }
        else {
            cout << "\n|";
        }
        for (int j = 0; j < this->columns; j++) {
            if (i == 0 && (j == 0 || j == 1 || j == 3 || j == 4)) {
                continue;
            }

            else if (i == 1 && (j == 0 || j == 4)) {
                continue;
            }
            else {

                cout << " (" << i << "," << j << ") ";
                cout << this->board[i][j] << " | ";
            }
        }
        cout << "\n---------------------------------------------";
    }
    cout << endl;
}

template <typename T>
bool Pyramid_Board<T>::is_win() {

    if ((this->board[0][2] == this->board[1][2] && this->board[1][2] == this->board[2][2] && this->board[0][2] != 0) ||
        (this->board[1][1] == this->board[1][2] && this->board[1][2] == this->board[1][3] && this->board[1][1] != 0) ||
        (this->board[2][0] == this->board[2][1] && this->board[2][1] == this->board[2][2] && this->board[2][0] != 0) ||
        (this->board[2][1] == this->board[2][2] && this->board[2][2] == this->board[2][3] && this->board[2][1] != 0) ||
        (this->board[2][2] == this->board[2][3] && this->board[2][3] == this->board[2][4] && this->board[2][2] != 0) ||
        (this->board[0][2] == this->board[1][1] && this->board[1][1] == this->board[2][0] && this->board[0][2] != 0) ||
        (this->board[0][2] == this->board[1][3] && this->board[1][3] == this->board[2][4] && this->board[0][2] != 0) ){
        return true;
    }
    else{
        return false;
    }

}

template <typename T>
bool Pyramid_Board<T>::is_draw() {
    return this->n_moves == 9 && !is_win();
}

template <typename T>
bool Pyramid_Board<T>::game_is_over() {
    return is_win() || is_draw();
}

template <typename T>
Pyramid_Player<T>::Pyramid_Player(string player_name, T symbol) : Player<T>(player_name, symbol) {}

template <typename T>
void Pyramid_Player<T>::getmove(int& x, int& y) {
    cout << "\nPlease enter your correct move (x and y) separated by spaces and make sure it is empty : ";
    cin >> x >> y;
}

template <typename T>
Pyramid_Random_Player<T>::Pyramid_Random_Player(T symbol)
        : RandomPlayer<T>(symbol), rows(3), columns(5) {
    this->name = "Random Computer Player";
    srand(static_cast<unsigned int>(time(0)));
}

template <typename T>
void Pyramid_Random_Player<T>::getmove(int& x, int& y) {
    x = rand() % rows;
    y = rand() % columns;
}

#endif //_PYRAMID_TICTACTOE_H
